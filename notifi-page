import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

class NotificationPage extends StatefulWidget {
  const NotificationPage({Key? key}) : super(key: key);

  @override
  _NotificationPageState createState() => _NotificationPageState();
}

class _NotificationPageState extends State<NotificationPage> {
  List<Map<String, dynamic>> _notifications = [];

  @override
  void initState() {
    super.initState();
    _loadNotifications();
  }

  // Load notifications from SharedPreferences
  Future<void> _loadNotifications() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    List<String>? storedNotifications = prefs.getStringList('notifications');

    if (storedNotifications != null) {
      setState(() {
        _notifications = storedNotifications
            .map((notification) => json.decode(notification))
            .map((notification) => Map<String, dynamic>.from(notification))
            .toList();
      });
    }
  }

  // Clear notifications
  void _clearAllNotifications() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    await prefs.remove('notifications');

    setState(() {
      _notifications.clear();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Notifications'),
        actions: [
          if (_notifications.isNotEmpty)
            IconButton(
              icon: const Icon(Icons.delete),
              onPressed: _clearAllNotifications,
            ),
        ],
      ),
      body: _notifications.isEmpty
          ? const Center(
              child: Text(
                'No notifications available',
                style: TextStyle(fontSize: 16),
              ),
            )
          : ListView.builder(
              itemCount: _notifications.length,
              itemBuilder: (context, index) {
                final notification =
                    _notifications[_notifications.length - 1 - index];
                return ListTile(
                  title: Text(notification['title'] ?? "No Title"),
                  subtitle: Text(notification['body'] ?? "No Body"),
                  trailing: Text(
                    DateTime.parse(notification['time'])
                        .toLocal()
                        .toString()
                        .split('.')[0],
                    style: const TextStyle(fontSize: 12),
                  ),
                );
              },
            ),
    );
  }
}
