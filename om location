import 'package:flutter/material.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:geocoding/geocoding.dart';
import 'package:url_launcher/url_launcher.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

class MapPage extends StatefulWidget {
  final String sessionId;
  final String vehicleId;

  MapPage({
    required this.sessionId,
    required this.vehicleId,
  });

  @override
  _MapPageState createState() => _MapPageState();
}

class _MapPageState extends State<MapPage> {
  GoogleMapController? _mapController;
  LatLng _startingLocation = LatLng(0.0, 0.0); // Default to (0,0) until API data is fetched
  bool _isLoading = true; // To handle loading state

  @override
  void initState() {
    super.initState();
    _fetchStartingLocation();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Map Page'),
        actions: [
          IconButton(
            icon: Icon(Icons.search),
            onPressed: _promptForDestination,
          ),
        ],
      ),
      body: _isLoading
          ? Center(child: CircularProgressIndicator())
          : GoogleMap(
              initialCameraPosition: CameraPosition(
                target: _startingLocation,
                zoom: 14.0,
              ),
              onMapCreated: (controller) {
                _mapController = controller;
              },
            ),
    );
  }

  Future<void> _fetchStartingLocation() async {
    final response = await http.get(Uri.parse(
      'http://34.93.202.185:5000/api/v1/vehicle/find_my_vehicle?vehicle_id=${widget.vehicleId}&session=${widget.sessionId}',
    ));

    if (response.statusCode == 200) {
      final data = jsonDecode(response.body);
      final latitude = double.parse(data['data']['latitude']);
      final longitude = double.parse(data['data']['longitude']);

      setState(() {
        _startingLocation = LatLng( longitude,latitude);
        _isLoading = false; // Hide loading indicator when data is fetched
        _mapController?.animateCamera(
          CameraUpdate.newLatLng(_startingLocation),
        );
      });
    } else {
      throw Exception('Failed to load starting location');
    }
  }

  Future<void> _promptForDestination() async {
    TextEditingController _controller = TextEditingController();

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Enter Destination'),
          content: TextField(
            controller: _controller,
            decoration: InputDecoration(hintText: 'Enter an address'),
          ),
          actions: <Widget>[
            TextButton(
              child: Text('Cancel'),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
            TextButton(
              child: Text('Search'),
              onPressed: () async {
                Navigator.of(context).pop();
                String searchQuery = _controller.text;
                if (searchQuery.isNotEmpty) {
                  await _searchPlace(searchQuery);
                }
              },
            ),
          ],
        );
      },
    );
  }

  Future<void> _searchPlace(String query) async {
    List<Location> locations = await locationFromAddress(query);
    if (locations.isNotEmpty) {
      LatLng destination = LatLng(locations.first.latitude, locations.first.longitude);

      // Open Google Maps with directions from starting location to destination
      String googleMapsUrl = 'https://www.google.com/maps/dir/?api=1&origin=${_startingLocation.latitude},${_startingLocation.longitude}&destination=${destination.latitude},${destination.longitude}';
      if (await canLaunch(googleMapsUrl)) {
        await launch(googleMapsUrl);
      } else {
        throw 'Could not launch $googleMapsUrl';
      }
    }
  }
}
